"""
Prometheus metrics for edge services.
"""
from prometheus_client import Counter, Histogram, Gauge, start_http_server
import structlog

logger = structlog.get_logger()

# Edge service metrics
CAMERA_STREAMS_ACTIVE = Gauge(
    'edge_camera_streams_active',
    'Number of active camera streams',
    ['edge_node_id']
)

FRAMES_PROCESSED = Counter(
    'edge_frames_processed_total',
    'Total frames processed by edge node',
    ['edge_node_id', 'camera_id']
)

DETECTION_LATENCY = Histogram(
    'edge_detection_latency_seconds',
    'Time taken for object detection on edge',
    ['edge_node_id', 'model_type']
)

EVENTS_GENERATED = Counter(
    'edge_events_generated_total',
    'Total events generated by edge node',
    ['edge_node_id', 'event_type']
)

NETWORK_ERRORS = Counter(
    'edge_network_errors_total',
    'Total network errors on edge node',
    ['edge_node_id', 'error_type']
)

MODEL_ACCURACY = Gauge(
    'edge_model_accuracy',
    'Current model accuracy on edge node',
    ['edge_node_id', 'model_version']
)

STORAGE_USAGE = Gauge(
    'edge_storage_usage_bytes',
    'Storage usage on edge node',
    ['edge_node_id', 'storage_type']
)

GPU_UTILIZATION = Gauge(
    'edge_gpu_utilization_percent',
    'GPU utilization percentage on edge node',
    ['edge_node_id']
)

INFERENCE_QUEUE_SIZE = Gauge(
    'edge_inference_queue_size',
    'Number of frames waiting for inference',
    ['edge_node_id']
)


class EdgeMetricsCollector:
    """Metrics collector for edge services."""
    
    def __init__(self, edge_node_id: str):
        self.edge_node_id = edge_node_id
        self.metrics_port = 8001
    
    def start_metrics_server(self):
        """Start Prometheus metrics server."""
        try:
            start_http_server(self.metrics_port)
            logger.info(
                "Metrics server started",
                port=self.metrics_port,
                edge_node_id=self.edge_node_id
            )
        except Exception as e:
            logger.error(
                "Failed to start metrics server",
                error=str(e),
                edge_node_id=self.edge_node_id
            )
    
    def record_frame_processed(self, camera_id: str):
        """Record a processed frame."""
        FRAMES_PROCESSED.labels(
            edge_node_id=self.edge_node_id,
            camera_id=camera_id
        ).inc()
    
    def record_detection_latency(self, model_type: str, latency: float):
        """Record detection latency."""
        DETECTION_LATENCY.labels(
            edge_node_id=self.edge_node_id,
            model_type=model_type
        ).observe(latency)
    
    def record_event_generated(self, event_type: str):
        """Record an event generation."""
        EVENTS_GENERATED.labels(
            edge_node_id=self.edge_node_id,
            event_type=event_type
        ).inc()
    
    def record_network_error(self, error_type: str):
        """Record a network error."""
        NETWORK_ERRORS.labels(
            edge_node_id=self.edge_node_id,
            error_type=error_type
        ).inc()
    
    def update_active_streams(self, count: int):
        """Update active camera streams count."""
        CAMERA_STREAMS_ACTIVE.labels(
            edge_node_id=self.edge_node_id
        ).set(count)
    
    def update_model_accuracy(self, model_version: str, accuracy: float):
        """Update model accuracy metric."""
        MODEL_ACCURACY.labels(
            edge_node_id=self.edge_node_id,
            model_version=model_version
        ).set(accuracy)
    
    def update_storage_usage(self, storage_type: str, bytes_used: int):
        """Update storage usage metric."""
        STORAGE_USAGE.labels(
            edge_node_id=self.edge_node_id,
            storage_type=storage_type
        ).set(bytes_used)
    
    def update_gpu_utilization(self, utilization_percent: float):
        """Update GPU utilization metric."""
        GPU_UTILIZATION.labels(
            edge_node_id=self.edge_node_id
        ).set(utilization_percent)
    
    def update_inference_queue_size(self, queue_size: int):
        """Update inference queue size."""
        INFERENCE_QUEUE_SIZE.labels(
            edge_node_id=self.edge_node_id
        ).set(queue_size)